---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda funcs and inline swagger Example. This deploys 2 different lambda funcs and an inline swagger definition.
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: DEV
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          "/v2/docs":
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FuncDocs.Arn}/invocations
                httpMethod: POST
                type: aws_proxy              
          "/v2/docs/{proxy+}":
            x-amazon-apigateway-any-method:
              responses: {}
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FuncDoc.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
        definitions:
          Empty:
            type: object
            title: Empty Schema

        
  FuncDocs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fncDocs
      Handler: index.handler
      Runtime: nodejs6.10
      Events:
        ProxyApi1:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /v2/docs
            Method: ANY

  FuncDoc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fncDoc
      Handler: index.handler
      Runtime: nodejs6.10
      Events:
        ProxyApi2:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /v2/docs/{proxy+}
            Method: ANY

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/DEV'
